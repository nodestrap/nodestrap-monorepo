css namespaces: -------------------------------------------------------------------------



// reusable-ui configs:
packages                        VAR     CFG
@reusable-ui/colors             -       col
@reusable-ui/borders            -       bor  bor-rd     // UPDATED
@reusable-ui/spacers            -       spc
@reusable-ui/breakpoints        -       -
@reusable-ui/typos              -       ""



// reusable-ui utilities:
@reusable-ui/accessibilities    -       -
@reusable-ui/validations        -       -



// reusable-ui features:
@reusable-ui/background         bg      -   // UPDATED
@reusable-ui/foreground         fg      -   // UPDATED
@reusable-ui/border             bd      -   // UPDATED
@reusable-ui/ring               ri      -   // UPDATED
@reusable-ui/animation          an      -   // UPDATED
@reusable-ui/padding            pd      -   // UPDATED



// reusable-ui capabilities:
@reusable-ui/groupable          gr      -   // UPDATED



// reusable-ui variants:
@reusable-ui/orientationable    -       -
@reusable-ui/resizable          -       -
@reusable-ui/themable           th      -   // UPDATED
@reusable-ui/gradientable       gd      -   // UPDATED
@reusable-ui/outlineable        ol      -   // UPDATED
@reusable-ui/mildable           mi      -   // UPDATED
@reusable-ui/nudible            nu      -   // UPDATED
@reusable-ui/basic-variants     -       -



// reusable-ui states:
@reusable-ui/excitable          ex  // UPDATED              PEER: shared in config of [filter]                                                                  , register [anim, filter]
@reusable-ui/collapsible        co  // UPDATED              NO_PEER: no shared variables                                                                        , register [anim]
@reusable-ui/disableable        di  // UPDATED              PEER: shared in config of [filter]                                                                  , register [anim, filter]
@reusable-ui/activatable        ac  // UPDATED              PEER: shared in config of [filter] + supports for usesActiveAsClick()                               , register [anim, filter]
@reusable-ui/focusable          fo  // UPDATED              PEER: shared in config of [boxShadow]                                                               , register [anim, boxShadow]
@reusable-ui/interactable       in  // UPDATED              PEER: shared in config of [filter]                                                                  , register [anim, filter]
@reusable-ui/clickable          cl  // UPDATED              PEER: shared in config of [filter] + supports for usesActiveAsClick()                               , register [anim, filter]
@reusable-ui/invalidable        iv  // UPDATED              NO_PEER: no shared variables                                                                        , register [animValid, animInvalid]
@reusable-ui/active-as-click    ak  // only private vars    NO_PEER: no shared variables                                                                        , no_register
@reusable-ui/checkable          ch  // only private vars    PEER: shared in config of [filterIn, filterOut, transformIn, transformOut, filter, transform, anim] , no_register
@reusable-ui/validation-icon    vi  // only private vars    PEER: shared in CssStyle of [iconImage]                                                             , no_register



=========================================================================================



depends on :has() :

ifFocusing
ifBlurred
ifFocus
ifBlur
ifFocusBlurring

ifArriving
ifLeaved
ifArrive
ifLeave
ifArriveLeaving



(ifFocusing|ifBlurred|ifFocus|ifBlur|ifFocusBlurring|ifArriving|ifLeaved|ifArrive|ifLeave|ifArriveLeaving)



# = already referenced

// reusable-ui states:
    usesFocusable
        usesControlStates
            #
    usesInteractable
        usesControlStates
            #

// base-components:
    usesControlStates
        <Control>
        usesActionControlStates
            <ActionControl>
            usesEditableActionControlStates
                #
            usesButtonStates
                <Button>
                usesButtonIconStates
                    <ButtonIcon>
                usesHamburgerMenuButtonStates
                    #
            usesListActionItemStates
                #
        usesEditableControlStates
            <EditableControl>
            usesRangeStates
                <Range>
            usesEditableActionControlStates
                <EditableActionControl>
                usesCheckStates
                    <Check>
                    usesRadioStates
                        <Radio>
            usesEditableTextControlStates
                #
    usesEditableTextControlStates
        <EditableTextControl>
        usesInputStates
            <Input>

// simple-components:
    usesButtonGhostVariant
        usesButtonVariants
            <Button>
            usesButtonIconVariants
                <ButtonIcon>
            usesHamburgerMenuButtonVariants
                <HamburgerMenuButton>
    usesHamburgerMenuButtonStates
        <HamburgerMenuButton>

// layout-components:
    usesListActionItemStates
        <ListActionItem>



// list of components that depens on :has() :
<Control>
    <ActionControl>
        <Button>
            <ButtonIcon>
            <HamburgerMenuButton>
        <ListActionItem>
    <EditableControl>
        <Range>
        <EditableActionControl>
            <Check>
                <Radio>
    <EditableTextControl>
        <Input>



=========================================================================================



ifGradient|ifNotGradient|ifInheritGradient|ifOutlined|ifNotOutlined|ifInheritOutlined|ifMild|ifNotMild|ifInheritMild



ifGradient|ifNotGradient|ifInheritGradient

------------------------------------------------------------------------------------

ifOutlined|ifNotOutlined|ifInheritOutlined

outlined = true (Semi nude)
1. <Carousel> > <Navscroll> // outlined bullet
2. <Busy>                   // makes bold_color spinner (currentColor)

outlined = false (Regular)
0. <-- none -->

outlined = inherit
0. <-- none -->

------------------------------------------------------------------------------------

ifMild|ifNotMild|ifInheritMild

mild = true (Smooth)
1. <Indicator>           // for indicating purpose
2. <EditableTextControl> // for text friendly
3. <Container>           // for content friendly
4. <Content>             // for content friendly
5. <Label>               // for text friendly
6. <Alert>               // for text friendly => smoothing <Popup> => <Basic>
7. <Tooltip>             // for text friendly => smoothing <Popup> => <Basic>

mild = false (Bold)
1. <Group> // cancel out List => Indicator => true => false
2. <Range> // to calculate the mildAlternate

mild = inherit(<Parent> dependent)
1. <CloseButton> => the icon color depends on <Parent>
2. <ProgressBar> => dependent of <Progress>
3. (Regular|Action)<ListItem> => dependent of <List>

------------------------------------------------------------------------------------

ifNude|ifNotNude

nude = true (backgroundless & borderless)
1. <ModalCard> > <Popup> // invisible_container for <Card>
2. <Check>               // borderless checkbox
3. <CloseButton>         // borderless close button
4. <Range>               // borderless range
5. <Busy>                // borderless spinner

nude = false
0. <-- none -->

nude = inherit
0. <-- none -->


=========================================================================================


do need (inherit)?Active:
    Indicator
    Control
    ActionControl
    EditableControl
    EditableActionControl

    Button
    ButtonIcon
    HamburgerMenuButton + onActiveChange

    Check
    Radio

    Card
    List

not need (inherit)?Active:
    EditableTextControl (hidden feature)
    ToggleButton + onActiveChange
    NavButton
    CloseButton


=========================================================================================


do need (inherit)Readonly:
    Indicator (hidden feature)
    Control (hidden feature)
    EditableControl
    EditableTextControl
    EditableActionControl
    Check
    Radio
    Input
    Range

not need (inherit)Readonly:
    ActionControl
    Button
    ButtonIcon
    ToggleButton
    HamburgerMenuButton
    NavButton
    CloseButton
    
    Card (hidden feature)
    List (hidden feature)


=========================================================================================


do need (inherit)?Enabled:
    Indicator
    Control
    ActionControl
    EditableControl
    EditableTextControl
    EditableActionControl

    Button
    ButtonIcon
    HamburgerMenuButton
    ToggleButton
    NavButton
    CloseButton

    Check
    Radio
    Input
    Range

    Card
    List

not need (inherit)?Enabled:
    <none>


=========================================================================================

// list of <Component>s that directly/indirectly implements collapsible

features:                                                                      [expanded]     [on(Expand|Collapse)(Start|End)]       [onExpandedChange]                    [defaultExpanded]

<Navbar>			    desc: ---no_desc---					                CollapsibleProps		---not_implemented---       -------not_implemented------        --------not_implemented-------
<TabPanel>			    desc: ---no_desc---					                CollapsibleProps		CollapsibleEventProps       -------not_implemented------        --------not_implemented-------
<Popup>			        desc: <Badge><Busy><Alert><Tooltip><ModalCard>	    CollapsibleProps		CollapsibleEventProps
<Collapse>		        desc: <ModalSide><Dropdown>				            CollapsibleProps		CollapsibleEventProps

<Alert>			        desc: ---no_desc---                                 CollapsibleProps*		CollapsibleEventProps*      ControllableCollapsibleProps
<Tooltip>               desc: ---no_desc---                                 CollapsibleProps*		CollapsibleEventProps*

<Dropdown>		        desc: <DropdownList><DropdownButton><DDLB>	        CollapsibleProps*		CollapsibleEventProps*		ControllableCollapsibleProps
<DropdownList>		    desc: <DropdownListButton>				            CollapsibleProps**	    CollapsibleEventProps**		ControllableCollapsibleProps*
<DropdownButton>	    desc: <DropdownListButton>				            CollapsibleProps**	    CollapsibleEventProps**		ControllableCollapsibleProps*		UncontrollableCollapsibleProps
<DropdownListButton>    desc: ---no_desc---					                CollapsibleProps***     CollapsibleEventProps***	ControllableCollapsibleProps**      UncontrollableCollapsibleProps*

<Modal>			        desc: <ModalCard><ModalSide>					    CollapsibleProps	    CollapsibleEventProps       ControllableCollapsibleProps
<ModalCard>             desc: ---no_desc---					                CollapsibleProps*	    CollapsibleEventProps*      ControllableCollapsibleProps*
<ModalSide>             desc: ---no_desc---					                CollapsibleProps*	    CollapsibleEventProps*      ControllableCollapsibleProps*

<AccordionItem>	        base: <ListItem>                                    CollapsibleProps        CollapsibleEventProps       ControllableCollapsibleProps        UncontrollableCollapsibleProps
<Details>			    base: <Basic>                                       CollapsibleProps        CollapsibleEventProps       ControllableCollapsibleProps        UncontrollableCollapsibleProps
